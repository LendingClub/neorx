apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin:'application'
apply plugin: "jacoco"

group 'io.macgyver.neorx'
version = "1.0.2"
configurations {
	all*.exclude group: 'org.codehaus.groovy', module: 'groovy'
	all*.exclude group: 'log4j'
	all*.exclude group: 'xml-apis'
    all*.exclude group: 'commons-logging'
}

repositories {
   mavenLocal()
   mavenCentral()
	jcenter()
   

}

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {


    compile "com.google.guava:guava:${GUAVA_VERSION}"
	
	compile "io.reactivex:rxjava:${RXJAVA_VERSION}"
	compile 'com.fasterxml.jackson.core:jackson-databind:2.4.4'
	compile 'com.squareup.okhttp:okhttp:2.1.0'
	compile 'org.slf4j:slf4j-api:1.7.7'
	
	testCompile 'org.assertj:assertj-core:1.7.0'  
	testCompile 'org.kohsuke:wordnet-random-name:1.2'  
	testCompile "junit:junit:${JUNIT_VERSION}"
	testCompile "ch.qos.logback:logback-classic:${LOGBACK_VERSION}"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
	
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
	
	
}

artifacts {
        archives sourcesJar, javadocJar
}
uploadArchives {
    repositories {
        mavenDeployer {
            name = 'macgyver-bintray'
            if (!project.hasProperty('bintrayUser')) {
                project.ext['bintrayUser']=""
            }
            if (!project.hasProperty('bintrayKey')) {
                project.ext['bintrayKey']=""
            }
            repository(id: 'macgyver-bintray', url: 'https://api.bintray.com/maven/robschoening/io-macgyver/neorx'){
                authentication(userName: bintrayUser, password: bintrayKey)
			}
            pom.project {
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            
            }
        }
    }
}



jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
    //classDirectories = fileTree(dir: 'build/classes/main', include: 'com/thc/**')
    //sourceDirectories = fileTree(dir: 'scr/java', include: 'com/thc/**')
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}